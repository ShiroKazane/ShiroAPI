<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>ShiroAPI - <?= title ?></title>
		<meta name="title" content="ShiroAPI - <?= title ?>" />
		<meta name="theme-color" content="currentColor" />
		<meta name="description" content="Made with &#10084; by ShiroKazane." />
		<meta name="keywords" content="shiroapi, shiro api, shirokazane, obfuscator" />
		<meta name="author" content="ShiroKazane" />
		<meta name="url" content="api.shirokazane.my.id<?= url ?>" />
		<meta name="og:title" content="ShiroAPI - <?= title ?>" />
		<meta name="og:type" content="website" />
		<meta name="og:url" content="api.shirokazane.my.id<?= url ?>" />
		<meta name="og:image" content="/image/c9XJcP-w0n9ls7E" />
		<meta name="og:site_name" content="ShiroAPI" />
		<meta name="og:description" content="Made with &#10084; by ShiroKazane." />
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:site" content="api.shirokazane.my.id<?= url ?>" />
		<meta name="twitter:creator" content="@ShiroKazane" />
		<meta name="twitter:title" content="ShiroAPI - <?= title ?>" />
		<meta name="twitter:description" content="Made with &#10084; by ShiroKazane." />
		<meta name="twitter:image" content="/image/c9XJcP-w0n9ls7E" />
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" />
		<style>
			@import url("https://fonts.googleapis.com/css?family=Fira+Mono&amp;display=swap");
			textarea {
				resize: none;
			}

			textarea.auto {
				overflow-y: scroll;
			}

			textarea {
				box-sizing: border-box;
				width: 75%;
				max-height: 50vh;
				font-size: 14px;
				font-family: 'Fira Mono';
				line-height: 1.5;
				padding: 1em;
				overflow: auto;
				border: none;
				border-radius: 8px;
				color: #a2aabc;
				background: #2d3748;
				box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
			}

			textarea::-webkit-scrollbar {
				width: 0;
				height: 0;
			}

			textarea:focus,
			textarea:hover {
				outline: none;
			}

			body {
				min-height: 100vh;
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				background: #222831;
			}

			body::-webkit-scrollbar {
				width: 0;
				height: 0;
			}

			p {
				box-sizing: border-box;
				position: relative;
				font-size: 20px;
				margin: 10px 0;
				font-family: 'Fira Mono';
				color: #a2aabc;
			}

			pre[class*="language-"] {
				box-sizing: border-box;
				position: relative;
				tab-size: 4;
				width: 75%;
				padding: 1em;
				margin: 0.5em 0;
				overflow: auto;
				border-radius: 8px;
				background: #2d3748;
				box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
			}

			pre[class*="language-"]::-webkit-scrollbar {
				width: 0;
				height: 0;
			}
			
			pre code[class*="language-"] {
				font-family: 'Fira Mono';
				color: #a2aabc;
				line-height: 1.5;
				font-size: 1em;
				cursor: default;
			}

			pre code .token.keyword, .token.operator {
				color: #FFAE57;
			}
			pre code .token.punctuation {
				color: #FFD580;
			}
			pre code .token.number {
				color: #C3A6FF;
			}
			pre code .token.string {
				color: #BAE67E;
			}
			pre[class*="language-"] button {
				font-family: 'Fira Mono';
				background-color: #1d2433;
				color: #a2aabc;
				cursor: pointer;
				position: absolute;
				top: 5px;
				right: 5px;
				padding: 0.5rem;
				border: none;
				border-radius: 8px;
				margin: 0.25rem 0;
			}
			
			input {
				font-family: 'Fira Mono';
				width: 10%;
				height: 36px;
				border-radius: 4px;
				padding: 0 12px;
				margin: 10px 0;
				font-size: 14px;
				font-weight: normal;
				border: none;
				outline: none;
				color: #BAE67E;
				background-color: #2d3748;
				box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
			}

			input::placeholder {
				color: #BAE67E
			}
		</style>
	</head>
	<body>
		<textarea class="language-lua" rows="1" placeholder="..."></textarea>
		<input type="text" class="key" placeholder="Encrypt Key" value="shirokzn">
		<p>Result</p>
        <pre><code class="language-lua">print("ShiroObfuscator")</code></pre>
	</body>
	<script>
		document.querySelectorAll('textarea').forEach(el => {
			el.style.height = el.setAttribute('style', 'height: ' + el.scrollHeight + 'px');
			el.classList.add('auto');
			el.addEventListener('input', e => {
				el.style.height = 'auto';
				el.style.height = (el.scrollHeight) + 'px';
			});
		});

		let textarea = document.querySelector("textarea")
		textarea.addEventListener("keydown", function (e) {
            if (e.key === "Tab") {
                e.preventDefault();
                document.execCommand("insertText", false, "    ");
            }
        });

		let blocks = document.querySelectorAll("pre");
		let code = document.querySelector("code");

		blocks.forEach((block) => {
			block.ondblclick = async function() {
				select(block)
			}
		});

		async function select(block) {
			let code = block.querySelector("code");
			let text = code.innerText;
			let range = document.createRange();
			range.selectNodeContents(code);

			await navigator.clipboard.writeText(text);
			let selection = window.getSelection();
			selection.removeAllRanges();
			selection.addRange(range)
		}

		// Main Features

		textarea.oninput = obfuscate;

		function obfuscate() {

			if (textarea.value == "") {
				return code.innerHTML = "<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ShiroObfuscator\"</span><span class=\"token punctuation\">)</span>"
			}

			// declare realkey variable
            let realKey = "";

            // random chars length
            let leng = 128;
            // key integer length xor loop
            let k = 0;

            // characters
            const abc = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
            // characters table
            let abcTab = [];

            // inserting chars
            for (let i = 0; i < abc.length; i++) {
                abcTab[i] = abc[i];
            }

            // ran{m string
            let ran1 = "";
            let ran2 = "";
            let ran3 = "";
            let ran4 = "";
            let ran5 = "";
            let ran6 = "";
            for (let i = 0; i < leng; i++) {
                ran1 += abcTab[Math.floor(Math.random() * abcTab.length)];
                ran2 += abcTab[Math.floor(Math.random() * abcTab.length)];
                ran3 += abcTab[Math.floor(Math.random() * abcTab.length)];
                ran4 += abcTab[Math.floor(Math.random() * abcTab.length)];
                ran5 += abcTab[Math.floor(Math.random() * abcTab.length)];
                ran6 += abcTab[Math.floor(Math.random() * abcTab.length)];
            }

            // function encrypt xor
            const xorE = (sc, key) => {
                const table = [];
                let k = 0;
                for (let i = 0; i < sc.length; i++) {
                let byteValue = sc.charCodeAt(i) + key.charCodeAt(k);
                k++;
                table.push(byteValue);
                if (k == key.length) {
                    k = 0;
                }
                }
                return table;
            };

            const xorE2 = (sc, key) => {
                let table = [];
                for (let i = 0; i < sc.length; i++) {
                k += 1;
                let byte = sc.charCodeAt(i) + key.charCodeAt(k);
                table.push(byte);
                if (k == key.length) {
                    k = 0;
                }
                }
                k = 0;
                return table;
            };

            // function decrypt xor for testing
            const xorD = (table) => {
                let result = "";
                for (const v of table) {
                k = k + 1;
                result = result + String.fromCharCode(v - key.charCodeAt(k));
                if (k == key.length) {
                    k = 0;
                }
                }
                return result;
            };

            // declare table alibi
            let tab1 = [];
            let tab2 = [];
            let tab3 = [];
            let tab4 = [];
            let tab5 = [];
            let tab6 = [];

            for (let i = 0; i < leng; i++) {
                // tab1[i] = string.byte(abcTab[math.ranm(1, #abcTab)]
                tab1[i] =
                abcTab[Math.floor(Math.random() * abcTab.length)].charCodeAt(0);
                tab2[i] =
                abcTab[Math.floor(Math.random() * abcTab.length)].charCodeAt(0);
                tab3[i] =
                abcTab[Math.floor(Math.random() * abcTab.length)].charCodeAt(0);
                tab4[i] =
                abcTab[Math.floor(Math.random() * abcTab.length)].charCodeAt(0);
                tab5[i] =
                abcTab[Math.floor(Math.random() * abcTab.length)].charCodeAt(0);
                tab6[i] =
                abcTab[Math.floor(Math.random() * abcTab.length)].charCodeAt(0);
            }

            tab1 = tab1.join();
            tab2 = tab2.join();
            tab3 = tab3.join();
            tab4 = tab4.join();
            tab5 = tab5.join();
            tab6 = tab6.join();

            // function alibi alias pengalhan
            // @param var1 key
            // @param var2 string
            // @param var3 variable
            // @param thetable table
            const alibi = (var1, var2, var3, thetable) => {
                return `_ENV={string=string,table=table,math=math,pairs=pairs,load=load,print=print};${var1}="${var2}";${var2}="${var1}";${var3}={${thetable}};function xor(t)local ciphertext="";for i=1,#${var2} do local byte=string.byte(${var2}, i);local quibit=string.byte(${var1},(i-1)%#${var1}+1);ciphertext=ciphertext..string.char(bit.bxor(byte,quibit));end;return ciphertext;end;bit={bxor=function(a,b)local r,m=0,1;while a>0 and b>0 do local aa,bb=a%2,b%2;r=r+m*((aa+bb)%2);m=m*2;a=math.floor(a/2);b=math.floor(b/2) end;if a>0 then r=r+m*a end;if b>0 then r=r+m*b end;return r;end};xor(${var3})${ran1}z="Encrypt By ShiroKzn";`;
            };

            // @return function decrypt real
            const decX = (table) => {
                // ran3
                let script = ran3;
                // ran4
                let keyleng = ran4;
                // ran1
                let l = ran1;
                // ran2
                let v = ran2;
                // ran5
                let result = ran5;
                return `${script}={${table.join()}};${keyleng}=0;${result}='';for ${l},${v} in pairs(${script}) do ${keyleng}=${keyleng}+1;${result}=${result}.._ENV["\\115\\116\\114\\105\\110\\103"]["\\99\\104\\97\\114"](${v}-_ENV["\\115\\116\\114\\105\\110\\103"]["\\98\\121\\116\\101"]("${realKey}",${keyleng}));if ${keyleng}==#"${realKey}" then ${keyleng}=0;end;end;if ${ran1}z=="\\69\\110\\99\\114\\121\\112\\116\\32\\66\\121\\32\\83\\104\\105\\114\\111\\75\\122\\110" then _ENV["\\108\\111\\97\\100"](${result})() else print("Error while running this code");end;`;
            };

			let keys = document.querySelector("input").value;
			let sc = document.querySelector("textarea").value;

			for (let i = 0; i < keys.length; i++) {
                realKey += "\\" + keys.charCodeAt(i);
            }

			let templateE = `local key=[[${keys}]];${ran1}z='Encrypt By ShiroKzn';${ran2}=${ran1};${ran3}=${ran2};${ran4}=${ran3};${ran5}=${ran4};${ran6}=${ran5};`;
			let output =
				templateE +
				alibi(ran1, ran2, ran3, tab1) +
				alibi(ran4, ran2, ran5, tab2) +
				alibi(ran6, ran3, ran1, tab3) +
				decX(xorE(sc, keys)) +
				alibi(ran2, ran4, ran6, tab4) +
				alibi(ran1, ran4, ran5, tab5) +
				alibi(ran2, ran1, ran3, tab6);

			code.innerText = output;
		}
	</script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
</html>
